// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id               String             @id @default(cuid())
    name             String?
    email            String?            @unique
    role             String?
    emailVerified    DateTime?
    image            String?
    accounts         Account[]
    sessions         Session[]
    LessonCompletion LessonCompletion[]
    TeacherProfile   TeacherProfile?
    StudentProfile   StudentProfile?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model TeacherProfile {
    id     String  @id @default(cuid())
    name   String?
    school String
    user   User?   @relation(fields: [userId], references: [id])
    userId String? @unique
    Class  Class[]
}

model StudentProfile {
    id     String  @id @default(cuid())
    name   String?
    school String
    user   User?   @relation(fields: [userId], references: [id])
    userId String? @unique
    // Class  Class[]
}

model Class {
    id          String          @id @default(cuid())
    name        String
    subject     String?
    level       String?
    description String?
    createdAt   DateTime        @default(now())
    updatedAt   DateTime        @updatedAt
    teacher     TeacherProfile? @relation(fields: [userId], references: [userId])
    userId      String?
    Lessons     Lesson[]
}

model Lesson {
    lessonId         String             @id @default(cuid())
    title            String
    topic            String
    slides           String
    quiz             String?
    Class            Class?             @relation(fields: [classId], references: [id])
    classId          String?
    LessonCompletion LessonCompletion[]
}

model LessonCompletion {
    completionId String @id @default(cuid())
    Lesson       Lesson @relation(fields: [lessonId], references: [lessonId])
    lessonId     String
    User         User   @relation(fields: [userId], references: [id])
    userId       String
    progress     Float
    score        Float
    correct      Int?
    total        Int?
}
